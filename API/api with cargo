import subprocess
import mysql.connector
from mysql.connector import errorcode
from flask import Flask, render_template
from flask_restful import Resource, Api, fields, marshal_with
import time
from time import sleep
import datetime

app = Flask(__name__)
api = Api(app)

##
## Function definition
##
class viewFlights(Resource):
	def get(self):
		## Framework for function
		## -Each step should have a break with a detailed error message for failure
		##
		##	1. Establish connection to/query DB
		##	2. Store flight table in formatted html
		##	3. Return formatted html string
		
		case = None
		caseMsg = None
		flightTable = None

		## 1.
		try:
			conn = mysql.connector.connect(user='dkl9',
							password='thisIsNotAJoke!!',
							host='127.0.0.1',
							database='dkl9')
		except mysql.connector.Error as err:
			if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
				case = 'Failure'
				caseMsg = 'Invalid Credentials'
				return {'case': str(case), 'caseMsg':str(caseMsg), 'flightTable':str(flightTable)}
			
			elif err.errno == errorcode.ER_BAD_DB_ERROR:
				case = 'Failure'
				caseMsg = 'DB does not exist'
				return {'case': str(case), 'caseMsg':str(caseMsg), 'flightTable':str(flightTable)}
			
			else:
				case = 'Failure'
				caseMsg = 'General Error: '+err
				return {'case': str(case), 'caseMsg':str(caseMsg), 'flightTable':str(flightTable)}

		point = conn.cursor()
		sql = "SELECT * FROM flight"
		point.execute(sql)
		
		## 2.
		flightTable = '<h2>Flights</h2>'
		flightTable += '<table class = "table table-bordered table-hover"><thead><tr><th>Flight Number</th><th>Tail Number</th><th>Crew ID</th><th>Departure From </th><th>Departure To </th><th>Departure Time </th><th>Arrivals Time </th><th>Cargo Number</th></tr></thead><tbody>'
		for row in point:
				flightTable += '<tr><td>'+str(row[0])+'</td><td>'+str(row[1])+'</td><td>'+str(row[2])+'</td><td>'+str(row[3])+'</td><td>'+str(row[4])+'</td><td>'+str(row[5])+'</td><td>'+str(row[6])+'</td><td>'+str(row[7])+'</td></tr>'
		case = 'Success'
		caseMsg = 'Database queried successfully'
		## 3.
		conn.close()
		return {'case': str(case), 'caseMsg':str(caseMsg), 'flightTable':str(flightTable)}

class addCargo(Resource):
	def post(self):
		## Framework for function
		## -Note, each step should have a break with a detailed error message output for failure
		##
		##	1. Establish connection to DB
		##	2. Build/Send DB query; store response in var	
		##	3. If successful, return row
		##	4. If fail return error message
		try:
			conn = mysql.connector.connect(user='dkl9',
							password='thisIsNotAJoke!!',
							host='127.0.0.1',
							database='dkl9')
		except mysql.connector.Error as err:
			if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
				case = 'Failure'
				caseMsg = 'Invalid Credentials'
				return {'case': str(case), 'caseMsg':str(caseMsg), 'flightTable':str(flightTable)}
			
			elif err.errno == errorcode.ER_BAD_DB_ERROR:
				case = 'Failure'
				caseMsg = 'DB does not exist'
				return {'case': str(case), 'caseMsg':str(caseMsg), 'flightTable':str(flightTable)}
			
			else:
				case = 'Failure'
				caseMsg = 'General Error: '+err
				return {'case': str(case), 'caseMsg':str(caseMsg), 'flightTable':str(flightTable)}

		case = 'Success'
		caseMsg = 'Cargo was added to flight $flightnum!'
		point = conn.cursor()

		if request.form.get('type') == 'cr':
			tailnumber = strip(request.form.get('tailnumber'))
			type1 = strip(request.form.get('type1'))
			fuelcount = strip(request.form.get('fuelcount'))
			sql = '''INSERT INTO aircraft_info 
					  (TailNumber, Type, FuelCount)
					  VALUES ({tailnumber}, {type1}, {fuelcount});'''

			try:
				point.execute(sql.format(tailnumber=tailnumber, 
			   		type1=type1, fuelcount=fuelcount))
			except mysql.connector.Error as err:
				case = 'Failure'
				caseMsg = 'Cargo was unable to add'

		if request.form.get('type') == 'cre':
			crewid = strip(request.form.get('crewid'))
			pilotname = strip(request.form.get('pilotname'))
			navigatorname = strip(request.form.get('navigatorname'))

			sql = '''INSERT INTO aircrew (CrewID, PilotName, NavigatorName)
				  VALUES ({crewid}, {pilotname}, {navigatorname});'''

			try:
				point.execute( sql.format(crewid=crewid, 
			   		pilotname=pilotname, navigatorname=navigatorname) )
			except mysql.connector.Error as err:
				case = 'Failure'
				caseMsg = 'Cargo was unable to add'

		if request.form.get('type') == 'ca':
			cargonumber = strip(request.form.get('cargonumber'))
			weight = strip(request.form.get('weight'))
			content = strip(request.form.get('content'))
	   
			sql = '''INSERT INTO cargo (SkidNum, Weight, Content)
				  VALUES ({cargonumber}, {weight}, {content});'''

			try:
				point.execute( sql.format(cargonumber=cargonumber, weight=weight, content=content) )
			except mysql.connector.Error as err:
				case = 'Failure'
				caseMsg = 'Cargo was unable to add'

		if request.form.get('type') == 'fl':
			flightnum = strip(request.form.get('flightnum'))
			tailnum = strip(request.form.get('tailnum'))
			crewid = strip(request.form.get('crewid'))
			departurefrom = strip(request.form.get('departurefrom'))
			departureto = strip(request.form.get('departureto'))
			departuretime = strip(request.form.get('departuretime'))
			arrivaltime = strip(request.form.get('arrivaltime'))
			if request.form.get('arrivaltime') == "null":
				skidnum = None
			else:
				skidnum = strip(request.form.get('skidnum'))
				temp_departuretime = datetime.datetime.strptime(departuretime, "%d/%m/%Y %H:%M:%S")
			temp_arrivaltime = datetime.datetime.strptime(arrivaltime, "%d-%m-%Y %H:%M:%S")
			departuretime = time.mktime(temp_departuretime.timetuple())
			arrivaltime = time.mktime(temp_arrivaltime.timetuple())
	   
			sql = '''INSERT INTO flight 
				  (FlightNum, TailNum, CrewID,DepartureFrom,
				  DepartureTo,DepartureTime,ArrivalTime,SkidNum)
				  vALUES ({flightnum}, {tailnum}, {crewid}, {departurefrom},
				  {departureto},FROM_UNIXTIME({departuretime}),
				  FROM_UNIXTIME({arrivaltime}), {skidnum} );'''

			try:
				point.execute( sql.format(flightnum=flightnum, tailnum=tailnum, 
			   		crewid=crewid, departurefrom=departurefrom, departureto=departureto,
			   		departuretime=departuretime, arrivaltime=arrivaltime, skidnum=skidnum) )
				caseMsg = 'Cargo was added to flight %s!' %( flightnum )
		 	except mysql.connector.Error as err:
				case = 'Failure'
				caseMsg = 'Cargo was unable to add'

		conn.close()

		return {'case':case, 'caseMsg':caseMsg}

class searchFlight(Resource):
	def get(self):
		## Framework for function
		## -Each step should have a break with a detailed error message for failure
		##
		##	1. Establish connection to DB
		##	2. Read in flight number supplied
		##	3. Query DB and check for results
		##	4. If results, send table back

		return {'case':'Success', 'caseMsg':'Query results loaded!', 'flightTable':'<b> THIS IS WHAT YOU SEARCHED FOR RIGHT???? </b>'}

class syncDB(Resource):
	def get(self):
		sqlDump=subprocess.Popen('mysqldump -u backup dkl9>/tmp/dbDump.sql', shell=True, stderr=subprocess.PIPE)
		sleep(0.1)
		
		sqlDump= open('/tmp/dbDump.sql', 'r').read()
		dbData = {"Case":"Success", "db":str(sqlDump)}

		subprocess.Popen('rm -f /tmp/dbDump.sql', shell=True, stderr=subprocess.PIPE)
		return dbData

		
##
## Function routing and domain definition
##
api.add_resource(viewFlights, '/view')
api.add_resource(addCargo, '/add')
api.add_resource(searchFlight, '/search')
api.add_resource(syncDB, '/sync')

if __name__ == '__main__':
	app.run(host='0.0.0.0', debug=True)
